name: Create Release PR
on:
  workflow_dispatch:
    inputs:
      IS_UPDATE_PATCH_VERSION:
        description: "Update Pathch Version"
        default: true
        required: true
        type: boolean
      IS_UPDATE_VERSION_CODE:
        description: "Update Version Code"
        default: false
        required: true
        type: boolean

jobs:
  make_pull_request:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: "update patch version"
        if: ${{ github.event.inputs.IS_UPDATE_PATCH_VERSION == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const file = fs.readFileSync("release_info/version.json", "utf8");
            console.log(file);

            const jsonObject = JSON.parse(file);
            jsonObject.PATCH_VERSION_NAME += 1;
            fs.writeFileSync("release_info/version.json", JSON.stringify(jsonObject, null, 4));
      - name: "update version code"
        if: ${{ github.event.inputs.IS_UPDATE_VERSION_CODE == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const file = fs.readFileSync("release_info/version.json", "utf8");
            console.log(file);

            const jsonObject = JSON.parse(file);
            jsonObject.VERSION_CODE += 1;
            fs.writeFileSync("release_info/version.json", JSON.stringify(jsonObject, null, 4));
      - id: version_info
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const file = fs.readFileSync("release_info/version.json", "utf8");
            console.log(file);

            core.setOutput("version_info",  fs.readFileSync("release_info/version.json", "utf8"));
      - run: |
          echo '${{ toJSON(github) }}'
      - name: "make pull request"
        id: make_pull_request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          versionCode='${{ fromJson(steps.version_info.outputs.version_info).VERSION_CODE }}'
          major='${{ fromJson(steps.version_info.outputs.version_info).MAJOR_VERSION_NAME }}'
          minor='${{ fromJson(steps.version_info.outputs.version_info).MINOR_VERSION_NAME }}'
          patch='${{ fromJson(steps.version_info.outputs.version_info).PATCH_VERSION_NAME }}'
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          branchName="release/${major}.${minor}.${patch}"
          git branch $branchName
          git stash
          git switch $branchName
          git stash pop

          git add "release_info/version.json"
          git commit -m "release ${major}.${minor}.${patch} v${versionCode}"
          git push --set-upstream origin $branchName

          echo "========== gh pr create ========="
          releasePrUrl=$(gh pr create --base main --title "release ${major}.${minor}.${patch} v${versionCode}" --body "")
          echo "${releasePrUrl}"
          echo "::set-output name=release_pr_url::${releasePrUrl}"
      - name: "Translate comment URL"
        id: translate_comment_url
        uses: actions/github-script@v6
        env:
          PR_URL: ${{ steps.make_pull_request.outputs.release_pr_url }}
        with:
          script: |
            const {PR_URL} = process.env

            var url = PR_URL.replace("https://github.com", "https://api.github.com/repos")
                              .replace("/pull/", "/issues/")
            url += "/comments";
            console.log(PR_URL);
            console.log(url);
            core.setOutput("url",  url);
      - name: Comment      
        uses: octokit/request-action@v2.x
        with:
          route: POST ${{ steps.translate_comment_url.outputs.url }}
          body: ${{ toJSON(env.REQUEST_BODY) }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REQUEST_BODY: |
            test comment
      - name: git branch test
        run: |
          git checkout $GITHUB_HEAD_REF
          git branch -a
